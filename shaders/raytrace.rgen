#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64  : require

#include "host_device.h"

layout(set = 0, binding = eTlas) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = eOutImage, rgba32f) uniform image2D image;
layout(set = 0, binding = eCamera) uniform _ { camera_info_s camera; };

layout(location = 0) rayPayloadEXT hit_info_s hit_info;

void main() 
{
    float WIDTH = gl_LaunchSizeEXT.x;
    float HEIGHT = gl_LaunchSizeEXT.y;

    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = camera.viewInverse * vec4(0, 0, 0, 1);
    vec4 target = camera.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = camera.viewInverse * vec4(normalize(target.xyz), 0);

    uint ray_flags = gl_RayFlagsOpaqueEXT;
    float t_min = 0.0001;
    float t_max = 10000.0;



    vec3 final_color = vec3(0, 0, 0);
    int num_rays = 1;
    int max_bounce = 0;

    for (int i = 0; i < num_rays ; i++) {
        hit_info.recursive_step = max_bounce;
        hit_info.color = vec3(1, 1, 1);
        hit_info.light = vec3(0, 0, 0);
        hit_info.pos = origin.xyz;
        hit_info.direction = direction.xyz;
        traceRayEXT(topLevelAS, ray_flags, 0xFF, 0, 0, 0, origin.xyz, t_min, direction.xyz, t_max, 0);
        final_color += hit_info.color;
    }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(final_color / num_rays, 1.0));
}
