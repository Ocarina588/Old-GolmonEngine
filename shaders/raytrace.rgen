#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64  : require
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : require

#include "host_device.h"

layout(set = 0, binding = eTlas) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = eOutImage, rgba32f) uniform image2D image;
layout(set = 0, binding = eCamera) uniform _ { camera_info_s camera; };

layout(location = 0) rayPayloadEXT hitPayload prd;

uint PCG_Hash(uint ino)
{
    uint state = ino * 747796405 + 2891336453;
    uint word = (((state >> (state >> 28) + 4)) ^ state) * 277803737;
    return (word >> 22) ^ word;
}

uint generate_seed(void) {
    uint s = uint(gl_LaunchIDEXT.x) * 37u + uint(gl_LaunchIDEXT.y) * 97u;
    s ^= (s << 13u);
    s ^= (s >> 17u);
    s ^= (s << 5u);
    return s;
}

float rand(void)
{
    prd.seed = PCG_Hash(prd.seed);
    return prd.seed / float(0x7FFFFFFF);
}


vec3 trace_ray(vec3 origin, vec3 direction, int max_bounce)
{
    vec3 light = vec3(0);
    vec3 final_color = vec3(1.f, 1.f, 1.f);
    prd.rayOrigin = origin;
    prd.rayDir = direction;
    for (int i = 0; i <= max_bounce ; i++) {
        rand();
        traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0, prd.rayOrigin, 0.001f, prd.rayDir, 10000, 0);
        light += final_color * prd.material.emissive.xyz;
        final_color *= prd.material.diffuse.xyz;
    }

    return light;
    //return prd.material.diffuse.xyz;
}

void store_pixel(vec3 color)
{
    vec4 old_pixel = imageLoad(image, ivec2(gl_LaunchIDEXT.xy));
    vec4 new_pixel = vec4(color, 1.0);

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), mix(old_pixel, new_pixel, 1));
    //imageStore(image, ivec2(gl_LaunchIDEXT.xy), new_pixel);
}

void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = camera.viewInverse * vec4(0, 0, 0, 1);
    vec4 target = camera.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = camera.viewInverse * vec4(normalize(target.xyz), 0);

    int num_rays = int(camera.num_rays.x);
    int max_bounce = int(camera.max_bounce.x);

    vec3 light = vec3(0);

    prd.seed = generate_seed();

    for (int i = 0; i < num_rays ; i++)
        light += trace_ray(origin.xyz, direction.xyz, max_bounce);

    light *= camera.frames.y;

    if (num_rays > 0)
        light /= num_rays;

    store_pixel(light);
}
